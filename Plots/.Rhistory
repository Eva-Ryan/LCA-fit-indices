#Show the first few row to check the home data is correct
head(home.data)
# Calculate the Away data
away.data <- data.edit %>%
# Remove rows with team names missing
filter(!(is.na(HomeTeam) | (HomeTeam == "")
| is.na(AwayTeam) | (AwayTeam == ""))) %>%
# Calculate League Points for away team
mutate(HWin  = calculate.win(FTAG, FTHG),
HDraw = calculate.draw(FTAG, FTHG),
HLose = calculate.lose(FTAG, FTHG),
HPts  = calculate.points(FTAG, FTHG)) %>%
# Create Away Team table entry
group_by(AwayTeam) %>% summarise(APlyd = length(HomeTeam),
AWin  = sum(HWin),
ADraw = sum(HDraw),
ALose = sum(HLose),
AFor  = sum(FTAG),
AAg   = sum(FTHG),
APts  = sum(HPts)) %>%
rename(Team = AwayTeam)
#We join the home and away data on their common team column
table.data <- inner_join(home.data, away.data, by = "Team") %>%
mutate(Plyd         = HPlyd + APlyd,
Win          = HWin  + AWin,
Draw         = HDraw + ADraw,
Lose         = HLose + ALose,
GoalsFor     = HFor  + AFor,
GoalsAgainst = HAg   + AAg,
GoalDiff     = GoalsFor - GoalsAgainst,
Pts          = HPts  + APts) %>%
select(Team, Plyd, Win, Draw, Lose, GoalsFor, GoalsAgainst, GoalDiff, Pts) %>%
arrange(desc(Pts), GoalDiff, GoalDiff, GoalsFor)
kable(table.data,
caption = paste0("English Premier League Table 2020-2021- "),
row.name = TRUE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
kable(table.data,
caption = paste0("English Premier League Table 2020-2021- "),
row.name = TRUE) %>% #creates a table from the table.data dataframe
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
GS <- ggplot(table.data, aes(x=GoalsFor, y=GoalsAgainst, label = Team)) +
geom_point(shape=21)+
geom_text(size = 3.1, vjust =1.5)+
labs(x="Goals For", y="Goals Against", title = "PL Goals For V Against 20/21")+
xlim(10,90)+ ylim(20,90)
ggplotly(GS)
kable(table.data[1:20, c("Team", "GoalsFor")],
caption = "English Premier League Top Scorers") %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE)
#Checking and removing duplicate entries
pl_data <- distinct(pl_data)
#Changing date field from character to date
pl_data$Date <- dmy(pl_data$Date)
#changing all columns to lower case
pl_data <- clean_names(pl_data)
#Replacing Abbreviations to make it more readable
prem_clean <- pl_data %>%
select(date, home_team, away_team, ft_home_goals = fthg, ft_away_goals = ftag,
ft_result = ftr,
home_shots = hs, away_shots = as, home_shots_on_target = hst,
away_shots_on_target = ast, home_fouls = hf, away_fouls = af, home_yellows = hy, away_yellows = ay, home_reds = hr, away_reds = ar)
#Combining home and away stats by matches using summarise
prem_combined <- pl_data %>%
summarise(date, home_team, away_team, goals_scored = fthg + ftag, result = ftr,
total_shots = hs + as, shots_on_target = hst + ast,
fouls_committed = hf + af, bookings = hy+ay+hr+ar, yellow_cards = hy+ay, red_cards = hr+ar)
#What teams featured in the Premier League for the 2021/22 Season
#Use distinct function to keep only each distinct row from the data frame,
#giving us a list of the clubs in the PL
distinct(pl_data,football_clubs = home_team) %>%
arrange(football_clubs)
# This code creates a new data frame called prem_combined_monthly, which is
#based on the prem_combined data frame.How many goals were scored each month
#throughout the season
prem_combined_monthly <- prem_combined %>%
mutate(month = format(date, "%Y-%M")) %>%
group_by(month) %>%
summarise(total_goals_scored = sum(goals_scored),
total_shots = sum(total_shots))
# View the new data frame
prem_combined_monthly
prem_combined %>%
summarise(total_goals = sum(goals_scored),total_shots = sum(total_shots),
total_shots_on_target = sum(shots_on_target),
conversion_rate = total_goals/total_shots*100)
#From the 380 fixtures played a total of 1,024 goals were scored from a total
#of 9188 shots at goal, that's an average of 2.82 goals per game and a goal
#conversion rate of 11%.
#Checking and removing duplicate entries
pl_data <- distinct(pl_data)
#Changing date field from character to date
pl_data$Date <- dmy(pl_data$Date)
#Checking and removing duplicate entries
pl_data <- distinct(pl_data)
#Changing date field from character to date
#pl_data$Date <- dmy(pl_data$Date)
#changing all columns to lower case
pl_data <- clean_names(pl_data)
#Replacing Abbreviations to make it more readable
prem_clean <- pl_data %>%
select(date, home_team, away_team, ft_home_goals = fthg, ft_away_goals = ftag,
ft_result = ftr,
home_shots = hs, away_shots = as, home_shots_on_target = hst,
away_shots_on_target = ast, home_fouls = hf, away_fouls = af, home_yellows = hy, away_yellows = ay, home_reds = hr, away_reds = ar)
#Combining home and away stats by matches using summarise
prem_combined <- pl_data %>%
summarise(date, home_team, away_team, goals_scored = fthg + ftag, result = ftr,
total_shots = hs + as, shots_on_target = hst + ast,
fouls_committed = hf + af, bookings = hy+ay+hr+ar, yellow_cards = hy+ay, red_cards = hr+ar)
#What teams featured in the Premier League for the 2021/22 Season
#Use distinct function to keep only each distinct row from the data frame,
#giving us a list of the clubs in the PL
distinct(pl_data,football_clubs = home_team) %>%
arrange(football_clubs)
# This code creates a new data frame called prem_combined_monthly, which is
#based on the prem_combined data frame.How many goals were scored each month
#throughout the season
prem_combined_monthly <- prem_combined %>%
mutate(month = format(date, "%Y-%M")) %>%
group_by(month) %>%
summarise(total_goals_scored = sum(goals_scored),
total_shots = sum(total_shots))
# View the new data frame
prem_combined_monthly
prem_combined %>%
summarise(total_goals = sum(goals_scored),total_shots = sum(total_shots),
total_shots_on_target = sum(shots_on_target),
conversion_rate = total_goals/total_shots*100)
#From the 380 fixtures played a total of 1,024 goals were scored from a total
#of 9188 shots at goal, that's an average of 2.82 goals per game and a goal
#conversion rate of 11%.
# Create the plot
GG <- ggplot(prem_combined_monthly, aes(x = date, y = total_goals_scored)) +
geom_col(fill = "#38003c") +
scale_x_date(date_labels="%b", date_breaks = "1 month") +
xlab("Month") + ylab("Goals Scored") +
labs(title = "Goals by Month") +
facet_wrap(~ month, ncol = 3, scales = "free_x")
ggplotly(GG)
head(prem_combined_monthly)
# Create the plot
GG <- ggplot(prem_combined_monthly, aes(x = month, y = total_goals_scored)) +
geom_col(fill = "#38003c") +
scale_x_date(date_labels="%b", date_breaks = "1 month") +
xlab("Month") + ylab("Goals Scored") +
labs(title = "Goals by Month") +
facet_wrap(~ month, ncol = 3, scales = "free_x")
ggplotly(GG)
# Create the plot
GG <- ggplot(prem_combined_monthly, aes(x = month, y = total_goals_scored)) +
geom_col(fill = "#38003c") +
#scale_x_date(date_labels="%b", date_breaks = "1 month") +
xlab("Month") + ylab("Goals Scored") +
labs(title = "Goals by Month") +
facet_wrap(~ month, ncol = 3, scales = "free_x")
ggplotly(GG)
prem_combined %>%
summarise(total_goals = sum(goals_scored),total_shots = sum(total_shots),
total_shots_on_target = sum(shots_on_target),
conversion_rate = total_goals/total_shots*100)
#From the 380 fixtures played a total of 1,024 goals were scored from a total
#of 9188 shots at goal, that's an average of 1.347 goals per game and a goal
#conversion rate of 11%.
GH <- ggplot(table.data, aes(x=Team)) +
geom_col(aes(y=Win, fill = "Wins"), position = "dodge") +
geom_col(aes(y=-Lose, fill = "Losses"), position = "dodge") +
scale_fill_manual(values = c("Wins" = "seagreen3", "Losses" = "firebrick3")) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Teams") + ylab("Wins/Losses") +
labs(title = "Total Games won and lost by each Football team")+
scale_y_continuous(labels = abs, breaks = seq(-30, 30, 5))
ggplotly(GH)
testImplications <- function( covariance.matrix, sample.size ){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
implications <- list(c("Severe pain","Age","Education level"),
c("Severe pain","Age","Access to healthcare","Other socio-eco variables"),
c("Severe pain","Age","Chronic diseases e.g., cancer","Access to healthcare"),
c("Severe pain","Education level","Access to healthcare","Other socio-eco variables"),
c("Severe pain","Education level","Chronic diseases e.g., cancer","Access to healthcare"),
c("Severe pain","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Severe pain","Gender","Access to healthcare","Chronic diseases e.g., cancer"),
c("Severe pain","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare"),
c("Death","Education level","Access to healthcare","Age","Other socio-eco variables"),
c("Death","Education level","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Death","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Death","Gender","Education level","Access to healthcare","Chronic diseases e.g., cancer"),
c("Death","Gender","Access to healthcare","Age","Chronic diseases e.g., cancer"),
c("Death","Other socio-eco variables","Chronic diseases e.g., cancer","Education level","Access to healthcare"),
c("Death","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Death","Functional disability","Mental health issues e.g. depression","Severe pain","Age","Access to healthcare","opioid use"),
c("Mental health issues e.g. depression","Age","Severe pain","Functional disability"),
c("Mental health issues e.g. depression","Education level","Access to healthcare","Age","Other socio-eco variables"),
c("Mental health issues e.g. depression","Education level","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Mental health issues e.g. depression","Education level","Access to healthcare","Severe pain","Age"),
c("Mental health issues e.g. depression","Education level","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Mental health issues e.g. depression","Gender","Education level","Access to healthcare","Chronic diseases e.g., cancer"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Age","Chronic diseases e.g., cancer"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Severe pain","Other socio-eco variables"),
c("Mental health issues e.g. depression","Gender","Education level","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Age","Severe pain"),
c("Mental health issues e.g. depression","Gender","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Other socio-eco variables","Chronic diseases e.g., cancer","Education level","Access to healthcare"),
c("Mental health issues e.g. depression","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Mental health issues e.g. depression","Other socio-eco variables","Access to healthcare","Severe pain","Education level"),
c("Mental health issues e.g. depression","Other socio-eco variables","Access to healthcare","Severe pain","Age"),
c("Mental health issues e.g. depression","Other socio-eco variables","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Other socio-eco variables","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Education level","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Access to healthcare","Age","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Access to healthcare","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","opioid use","Severe pain","Functional disability"),
c("Age","Gender"),
c("Age","Other socio-eco variables"),
c("Age","Chronic diseases e.g., cancer"),
c("Age","Access to healthcare","Education level"),
c("Age","opioid use","Severe pain","Access to healthcare"),
c("Age","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Age","opioid use","Other socio-eco variables","Access to healthcare"),
c("Age","opioid use","Education level"),
c("Education level","Gender"),
c("Education level","Other socio-eco variables"),
c("Education level","Chronic diseases e.g., cancer"),
c("Education level","Functional disability","Severe pain","Age","Access to healthcare"),
c("Education level","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Education level","Functional disability","Other socio-eco variables","Access to healthcare","Age"),
c("Education level","opioid use","Severe pain","Access to healthcare"),
c("Education level","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Education level","opioid use","Other socio-eco variables","Access to healthcare"),
c("Gender","Other socio-eco variables"),
c("Gender","Access to healthcare"),
c("Gender","Functional disability","Severe pain","Age","Access to healthcare"),
c("Gender","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Gender","Functional disability","Access to healthcare","Other socio-eco variables","Severe pain"),
c("Gender","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Gender","Functional disability","Access to healthcare","Education level","Chronic diseases e.g., cancer"),
c("Gender","Functional disability","Other socio-eco variables","Chronic diseases e.g., cancer"),
c("Gender","opioid use","Severe pain","Access to healthcare"),
c("Gender","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Gender","opioid use","Other socio-eco variables","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","Functional disability","Severe pain","Age","Access to healthcare"),
c("Other socio-eco variables","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Other socio-eco variables","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","Functional disability","Access to healthcare","Education level","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","opioid use","Severe pain","Access to healthcare"),
c("Other socio-eco variables","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Chronic diseases e.g., cancer","Access to healthcare","Other socio-eco variables"),
c("Chronic diseases e.g., cancer","Functional disability","Severe pain","Age","Access to healthcare"),
c("Chronic diseases e.g., cancer","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Chronic diseases e.g., cancer","Functional disability","Access to healthcare","Other socio-eco variables","Severe pain"),
c("Chronic diseases e.g., cancer","opioid use","Severe pain","Access to healthcare"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
testImplications <- function( covariance.matrix, sample.size ){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
implications <- list(c("Severe pain","Age","Education level"),
c("Severe pain","Age","Access to healthcare","Other socio-eco variables"),
c("Severe pain","Age","Chronic diseases e.g., cancer","Access to healthcare"),
c("Severe pain","Education level","Access to healthcare","Other socio-eco variables"),
c("Severe pain","Education level","Chronic diseases e.g., cancer","Access to healthcare"),
c("Severe pain","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Severe pain","Gender","Access to healthcare","Chronic diseases e.g., cancer"),
c("Severe pain","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare"),
c("Death","Education level","Access to healthcare","Age","Other socio-eco variables"),
c("Death","Education level","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Death","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Death","Gender","Education level","Access to healthcare","Chronic diseases e.g., cancer"),
c("Death","Gender","Access to healthcare","Age","Chronic diseases e.g., cancer"),
c("Death","Other socio-eco variables","Chronic diseases e.g., cancer","Education level","Access to healthcare"),
c("Death","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Death","Functional disability","Mental health issues e.g. depression","Severe pain","Age","Access to healthcare","opioid use"),
c("Mental health issues e.g. depression","Age","Severe pain","Functional disability"),
c("Mental health issues e.g. depression","Education level","Access to healthcare","Age","Other socio-eco variables"),
c("Mental health issues e.g. depression","Education level","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Mental health issues e.g. depression","Education level","Access to healthcare","Severe pain","Age"),
c("Mental health issues e.g. depression","Education level","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Mental health issues e.g. depression","Gender","Education level","Access to healthcare","Chronic diseases e.g., cancer"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Age","Chronic diseases e.g., cancer"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Severe pain","Other socio-eco variables"),
c("Mental health issues e.g. depression","Gender","Education level","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Age","Severe pain"),
c("Mental health issues e.g. depression","Gender","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Other socio-eco variables","Chronic diseases e.g., cancer","Education level","Access to healthcare"),
c("Mental health issues e.g. depression","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Mental health issues e.g. depression","Other socio-eco variables","Access to healthcare","Severe pain","Education level"),
c("Mental health issues e.g. depression","Other socio-eco variables","Access to healthcare","Severe pain","Age"),
c("Mental health issues e.g. depression","Other socio-eco variables","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Other socio-eco variables","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Education level","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Access to healthcare","Age","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Access to healthcare","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","opioid use","Severe pain","Functional disability"),
c("Age","Gender"),
c("Age","Other socio-eco variables"),
c("Age","Chronic diseases e.g., cancer"),
c("Age","Access to healthcare","Education level"),
c("Age","opioid use","Severe pain","Access to healthcare"),
c("Age","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Age","opioid use","Other socio-eco variables","Access to healthcare"),
c("Age","opioid use","Education level"),
c("Education level","Gender"),
c("Education level","Other socio-eco variables"),
c("Education level","Chronic diseases e.g., cancer"),
c("Education level","Functional disability","Severe pain","Age","Access to healthcare"),
c("Education level","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Education level","Functional disability","Other socio-eco variables","Access to healthcare","Age"),
c("Education level","opioid use","Severe pain","Access to healthcare"),
c("Education level","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Education level","opioid use","Other socio-eco variables","Access to healthcare"),
c("Gender","Other socio-eco variables"),
c("Gender","Access to healthcare"),
c("Gender","Functional disability","Severe pain","Age","Access to healthcare"),
c("Gender","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Gender","Functional disability","Access to healthcare","Other socio-eco variables","Severe pain"),
c("Gender","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Gender","Functional disability","Access to healthcare","Education level","Chronic diseases e.g., cancer"),
c("Gender","Functional disability","Other socio-eco variables","Chronic diseases e.g., cancer"),
c("Gender","opioid use","Severe pain","Access to healthcare"),
c("Gender","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Gender","opioid use","Other socio-eco variables","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","Functional disability","Severe pain","Age","Access to healthcare"),
c("Other socio-eco variables","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Other socio-eco variables","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","Functional disability","Access to healthcare","Education level","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","opioid use","Severe pain","Access to healthcare"),
c("Other socio-eco variables","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Chronic diseases e.g., cancer","Access to healthcare","Other socio-eco variables"),
c("Chronic diseases e.g., cancer","Functional disability","Severe pain","Age","Access to healthcare"),
c("Chronic diseases e.g., cancer","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Chronic diseases e.g., cancer","Functional disability","Access to healthcare","Other socio-eco variables","Severe pain"),
c("Chronic diseases e.g., cancer","opioid use","Severe pain","Access to healthcare"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
################################################################################
# Code to create plots of mean values and 95% coverage intervals for AIC/BIC/NFI
# across models with different numbers of classes. Uses the summary output
# files created in "3 Prepare fit statistics for plotting.R".
################################################################################
## load packages
library(tidyverse)
library(gridExtra)
library(grid)
library(ggpubr)
## function to calculate means and 95% coverage intervals for each stat and
# construct plots
plot_means_CI <- function(file_names, max_class, N){
# Inputs: file_names = naming convention for the folders/files relating to the
#                      simulation of interest
#         max_class = the maximum number of classes in the models fitted to
#                     the simulated datasets
#         N = sample size for the simulations
# Output: plot_list = list containing the AIC/BIC/NFI plots
# set working directory to where fit index summaries are saved
setwd("C:/Users/eva.ryan/Desktop/Year 3 Semester 2/Thesis work/LCA fit indices/Final simulations/R/Final output summaries")
# read in summary of simulation models fit stats
df <- read_csv(paste0(file_names, "_output_summary.csv"))
# create empty dataframes to populate with means and confidence intervals for
# each fit stat
# AIC
AICs <- as.data.frame(matrix(NA, nrow = max_class, ncol =  4))
names(AICs) <- c("classes", "means", "lower", "upper")
AICs$classes <- 1:max_class
# BIC
BICs <- as.data.frame(matrix(NA, nrow = max_class, ncol =  4))
names(BICs) <- c("classes", "means", "lower", "upper")
BICs$classes <- 1:max_class
# NFI
NFIs <- as.data.frame(matrix(NA, nrow = max_class, ncol =  4))
names(NFIs) <- c("classes", "means", "lower", "upper")
NFIs$classes <- 1:max_class
# cycle through different number of classes
for(c in 1:max_class){
# filter out just models with c classes
df_c <- df %>%
filter(Number_of_classes == c)
# calculate mean and 95% coverage intervals
# AIC
AICs$means[c] <- mean(df_c$AIC)
AICs$lower[c] <- df_c$AIC[order(df_c$AIC)][25]
AICs$upper[c] <- df_c$AIC[order(df_c$AIC)][976]
# BIC
BICs$means[c] <- mean(df_c$BIC)
BICs$lower[c] <- df_c$BIC[order(df_c$BIC)][25]
BICs$upper[c] <- df_c$BIC[order(df_c$BIC)][976]
# NFI
NFIs$means[c] <- mean(df_c$NFI)
NFIs$lower[c] <- df_c$NFI[order(df_c$NFI)][25]
NFIs$upper[c] <- df_c$NFI[order(df_c$NFI)][976]
}
## create plots
# AIC plot
aic_plot <- ggplot(AICs, aes(x = classes, y = means)) +
geom_line(linewidth = 1) +
geom_errorbar(linewidth = 1, width = .75, aes(ymin = lower, ymax = upper),
colour = "red") +
geom_point(shape = 21, size = 2, fill = "white") +
theme_light() +
xlab("") + ylab("") +
ggtitle("AIC") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(1:max_class))
# BIC plot
bic_plot <- ggplot(BICs, aes(x = classes, y = means)) +
geom_line(linewidth = 1) +
geom_errorbar(linewidth = 1, width = .75, aes(ymin = lower, ymax = upper),
colour = "red") +
geom_point(shape = 21, size = 2, fill = "white") +
theme_light() +
xlab("") + ylab("") +
ggtitle("BIC") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(1:max_class))
# NFI plot
nfi_plot <- ggplot(NFIs, aes(x = classes, y = means)) +
geom_line(linewidth = 1) +
geom_errorbar(linewidth = 1, width = .75, aes(ymin = lower, ymax = upper),
colour = "red") +
geom_point(shape = 21, size = 2, fill = "white") +
theme_light() +
xlab("") + ylab("") +
ggtitle("NFI") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = c(1:max_class))
## save plots individually
# set working directory to plots folder
setwd("C:/Users/eva.ryan/Desktop/Year 3 Semester 2/Thesis work/LCA fit indices/Final simulations/R/Plots and summary tables")
# AIC
ggsave(
filename = paste0(file_names, "_AIC_plot.jpg"),
plot = aic_plot,
units = "in",
width = 7,
height = 5,
dpi = 600
)
# BIC
ggsave(
filename = paste0(file_names, "_BIC_plot.jpg"),
plot = bic_plot,
units = "in",
width = 7,
height = 5,
dpi = 600
)
# NFI
ggsave(
filename = paste0(file_names, "_NFI_plot.jpg"),
plot = nfi_plot,
units = "in",
width = 7,
height = 5,
dpi = 600
)
# return list of plots
plot_list <- list()
plot_list[[1]] <- aic_plot
plot_list[[2]] <- bic_plot
plot_list[[3]] <- nfi_plot
return(plot_list)
}
## create individual plots for different sample sizes
plots_500 <- plot_means_CI(file_names = paste0("sims_", 500),
max_class = 6,
N = 500)
#plots_1000 <- plot_means_CI(file_names = paste0("sims_", 1000),
#                           max_class = 6,
#                           N = 1000)
plots_5000 <- plot_means_CI(file_names = paste0("sims_", 5000),
max_class = 6,
N = 5000)
plots_10000 <- plot_means_CI(file_names = paste0("sims_", 10000),
max_class = 6,
N = 10000)
plots_30000 <- plot_means_CI(file_names = paste0("sims_", 30000),
max_class = 6,
N = 30000)
plots_100000 <- plot_means_CI(file_names = paste0("sims_", 100000),
max_class = 6,
N = 100000)
## combine all plots together into one figure
plot_grid <- grid.arrange(
arrangeGrob(grobs = plots_500, left = "N = 500", ncol = 3, nrow = 1),
#arrangeGrob(grobs = plots_1000, left = "N = 1,000", ncol = 3, nrow = 1),
arrangeGrob(grobs = plots_5000, left = "N = 5,000", ncol = 3, nrow = 1),
arrangeGrob(grobs = plots_10000, left = "N = 10,000", ncol = 3, nrow = 1),
arrangeGrob(grobs = plots_30000, left = "N = 30,000", ncol = 3, nrow = 1),
arrangeGrob(grobs = plots_100000, left = "N = 100,000", ncol = 3, nrow = 1),
ncol = 1, nrow = 5,
top = text_grob("Fit Criteria Mean Values by Number of Classes, with 95% Coverage Bars",
size = 15))
# save the combined plot
ggsave(
filename = "All_plots.jpg",
plot = plot_grid,
units = "in",
width = 10,
height = 15,
dpi = 1000
)
