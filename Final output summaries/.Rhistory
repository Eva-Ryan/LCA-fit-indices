c("Severe pain","Gender","Access to healthcare","Chronic diseases e.g., cancer"),
c("Severe pain","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare"),
c("Death","Education level","Access to healthcare","Age","Other socio-eco variables"),
c("Death","Education level","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Death","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Death","Gender","Education level","Access to healthcare","Chronic diseases e.g., cancer"),
c("Death","Gender","Access to healthcare","Age","Chronic diseases e.g., cancer"),
c("Death","Other socio-eco variables","Chronic diseases e.g., cancer","Education level","Access to healthcare"),
c("Death","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Death","Functional disability","Mental health issues e.g. depression","Severe pain","Age","Access to healthcare","opioid use"),
c("Mental health issues e.g. depression","Age","Severe pain","Functional disability"),
c("Mental health issues e.g. depression","Education level","Access to healthcare","Age","Other socio-eco variables"),
c("Mental health issues e.g. depression","Education level","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Mental health issues e.g. depression","Education level","Access to healthcare","Severe pain","Age"),
c("Mental health issues e.g. depression","Education level","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Mental health issues e.g. depression","Gender","Education level","Access to healthcare","Chronic diseases e.g., cancer"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Age","Chronic diseases e.g., cancer"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Severe pain","Other socio-eco variables"),
c("Mental health issues e.g. depression","Gender","Education level","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Age","Severe pain"),
c("Mental health issues e.g. depression","Gender","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Other socio-eco variables","Chronic diseases e.g., cancer","Education level","Access to healthcare"),
c("Mental health issues e.g. depression","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Mental health issues e.g. depression","Other socio-eco variables","Access to healthcare","Severe pain","Education level"),
c("Mental health issues e.g. depression","Other socio-eco variables","Access to healthcare","Severe pain","Age"),
c("Mental health issues e.g. depression","Other socio-eco variables","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Other socio-eco variables","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Education level","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Access to healthcare","Age","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Access to healthcare","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","opioid use","Severe pain","Functional disability"),
c("Age","Gender"),
c("Age","Other socio-eco variables"),
c("Age","Chronic diseases e.g., cancer"),
c("Age","Access to healthcare","Education level"),
c("Age","opioid use","Severe pain","Access to healthcare"),
c("Age","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Age","opioid use","Other socio-eco variables","Access to healthcare"),
c("Age","opioid use","Education level"),
c("Education level","Gender"),
c("Education level","Other socio-eco variables"),
c("Education level","Chronic diseases e.g., cancer"),
c("Education level","Functional disability","Severe pain","Age","Access to healthcare"),
c("Education level","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Education level","Functional disability","Other socio-eco variables","Access to healthcare","Age"),
c("Education level","opioid use","Severe pain","Access to healthcare"),
c("Education level","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Education level","opioid use","Other socio-eco variables","Access to healthcare"),
c("Gender","Other socio-eco variables"),
c("Gender","Access to healthcare"),
c("Gender","Functional disability","Severe pain","Age","Access to healthcare"),
c("Gender","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Gender","Functional disability","Access to healthcare","Other socio-eco variables","Severe pain"),
c("Gender","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Gender","Functional disability","Access to healthcare","Education level","Chronic diseases e.g., cancer"),
c("Gender","Functional disability","Other socio-eco variables","Chronic diseases e.g., cancer"),
c("Gender","opioid use","Severe pain","Access to healthcare"),
c("Gender","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Gender","opioid use","Other socio-eco variables","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","Functional disability","Severe pain","Age","Access to healthcare"),
c("Other socio-eco variables","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Other socio-eco variables","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","Functional disability","Access to healthcare","Education level","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","opioid use","Severe pain","Access to healthcare"),
c("Other socio-eco variables","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Chronic diseases e.g., cancer","Access to healthcare","Other socio-eco variables"),
c("Chronic diseases e.g., cancer","Functional disability","Severe pain","Age","Access to healthcare"),
c("Chronic diseases e.g., cancer","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Chronic diseases e.g., cancer","Functional disability","Access to healthcare","Other socio-eco variables","Severe pain"),
c("Chronic diseases e.g., cancer","opioid use","Severe pain","Access to healthcare"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
testImplications <- function( covariance.matrix, sample.size ){
library(ggm)
tst <- function(i){ pcor.test( pcor(i,covariance.matrix), length(i)-2, sample.size )$pvalue }
tos <- function(i){ paste(i,collapse=" ") }
implications <- list(c("Severe pain","Age","Education level"),
c("Severe pain","Age","Access to healthcare","Other socio-eco variables"),
c("Severe pain","Age","Chronic diseases e.g., cancer","Access to healthcare"),
c("Severe pain","Education level","Access to healthcare","Other socio-eco variables"),
c("Severe pain","Education level","Chronic diseases e.g., cancer","Access to healthcare"),
c("Severe pain","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Severe pain","Gender","Access to healthcare","Chronic diseases e.g., cancer"),
c("Severe pain","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare"),
c("Death","Education level","Access to healthcare","Age","Other socio-eco variables"),
c("Death","Education level","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Death","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Death","Gender","Education level","Access to healthcare","Chronic diseases e.g., cancer"),
c("Death","Gender","Access to healthcare","Age","Chronic diseases e.g., cancer"),
c("Death","Other socio-eco variables","Chronic diseases e.g., cancer","Education level","Access to healthcare"),
c("Death","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Death","Functional disability","Mental health issues e.g. depression","Severe pain","Age","Access to healthcare","opioid use"),
c("Mental health issues e.g. depression","Age","Severe pain","Functional disability"),
c("Mental health issues e.g. depression","Education level","Access to healthcare","Age","Other socio-eco variables"),
c("Mental health issues e.g. depression","Education level","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Mental health issues e.g. depression","Education level","Access to healthcare","Severe pain","Age"),
c("Mental health issues e.g. depression","Education level","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Gender","Chronic diseases e.g., cancer","Other socio-eco variables"),
c("Mental health issues e.g. depression","Gender","Education level","Access to healthcare","Chronic diseases e.g., cancer"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Age","Chronic diseases e.g., cancer"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Severe pain","Other socio-eco variables"),
c("Mental health issues e.g. depression","Gender","Education level","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Gender","Access to healthcare","Age","Severe pain"),
c("Mental health issues e.g. depression","Gender","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Other socio-eco variables","Chronic diseases e.g., cancer","Education level","Access to healthcare"),
c("Mental health issues e.g. depression","Other socio-eco variables","Chronic diseases e.g., cancer","Access to healthcare","Age"),
c("Mental health issues e.g. depression","Other socio-eco variables","Access to healthcare","Severe pain","Education level"),
c("Mental health issues e.g. depression","Other socio-eco variables","Access to healthcare","Severe pain","Age"),
c("Mental health issues e.g. depression","Other socio-eco variables","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Other socio-eco variables","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Education level","Access to healthcare","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Access to healthcare","Age","Severe pain"),
c("Mental health issues e.g. depression","Chronic diseases e.g., cancer","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","Access to healthcare","Functional disability","Severe pain"),
c("Mental health issues e.g. depression","opioid use","Severe pain","Functional disability"),
c("Age","Gender"),
c("Age","Other socio-eco variables"),
c("Age","Chronic diseases e.g., cancer"),
c("Age","Access to healthcare","Education level"),
c("Age","opioid use","Severe pain","Access to healthcare"),
c("Age","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Age","opioid use","Other socio-eco variables","Access to healthcare"),
c("Age","opioid use","Education level"),
c("Education level","Gender"),
c("Education level","Other socio-eco variables"),
c("Education level","Chronic diseases e.g., cancer"),
c("Education level","Functional disability","Severe pain","Age","Access to healthcare"),
c("Education level","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Education level","Functional disability","Other socio-eco variables","Access to healthcare","Age"),
c("Education level","opioid use","Severe pain","Access to healthcare"),
c("Education level","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Education level","opioid use","Other socio-eco variables","Access to healthcare"),
c("Gender","Other socio-eco variables"),
c("Gender","Access to healthcare"),
c("Gender","Functional disability","Severe pain","Age","Access to healthcare"),
c("Gender","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Gender","Functional disability","Access to healthcare","Other socio-eco variables","Severe pain"),
c("Gender","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Gender","Functional disability","Access to healthcare","Education level","Chronic diseases e.g., cancer"),
c("Gender","Functional disability","Other socio-eco variables","Chronic diseases e.g., cancer"),
c("Gender","opioid use","Severe pain","Access to healthcare"),
c("Gender","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Gender","opioid use","Other socio-eco variables","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","Functional disability","Severe pain","Age","Access to healthcare"),
c("Other socio-eco variables","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Other socio-eco variables","Functional disability","Age","Access to healthcare","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","Functional disability","Access to healthcare","Education level","Chronic diseases e.g., cancer"),
c("Other socio-eco variables","opioid use","Severe pain","Access to healthcare"),
c("Other socio-eco variables","opioid use","Access to healthcare","Chronic diseases e.g., cancer"),
c("Chronic diseases e.g., cancer","Access to healthcare","Other socio-eco variables"),
c("Chronic diseases e.g., cancer","Functional disability","Severe pain","Age","Access to healthcare"),
c("Chronic diseases e.g., cancer","Functional disability","Severe pain","Access to healthcare","Education level"),
c("Chronic diseases e.g., cancer","Functional disability","Access to healthcare","Other socio-eco variables","Severe pain"),
c("Chronic diseases e.g., cancer","opioid use","Severe pain","Access to healthcare"))
data.frame( implication=unlist(lapply(implications,tos)),
pvalue=unlist( lapply( implications, tst ) ) )
}
?dbinom
# a. Pr(X = 5)
dbinom(x = 5, size = 10, prob = 0.2)
# b. Pr(X = 2)
dbinom(x = 2, size = 10, prob = 0.2)
# c. Pr(X = 1)
dbinom(x = 1, size = 10, prob = 0.2)
# d. Pr(X = 9)
dbinom(x = 9, size = 10, prob = 0.2)
set.seed(1) # ensure reproducibility
x <- rbinom(n = 1, size = 200, p = 0.5) # simulate 200 coin flips
# print number of heads
x
# a. Pr(X < 14)
pnorm(q = 14, mean = 40, sd = 9)
# b. Pr(X > 55)
pnorm(q = 55, mean = 40, sd = 9, lower.tail = FALSE)
?pnorm
# b. Pr(Y < 2) = Pr(Y = 0) + Pr(Y = 1)
pbinom(q = 1, size = 5, prob = 0.3)
# e. Pr(0 < Y <= 2) = Pr(Y = 1) + Pr(Y = 2)
pbinom(q = 2, size = 5, prob = 0.3) - pbinom(q = 0, size = 5, prob = 0.3)
# e. Pr(0 < Y <= 2) = Pr(Y = 1) + Pr(Y = 2)
pbinom(q = 2, size = 5, prob = 0.3) - dbinom(q = 0, size = 5, prob = 0.3)
# e. Pr(0 < Y <= 2) = Pr(Y = 1) + Pr(Y = 2)
pbinom(q = 2, size = 5, prob = 0.3) - dbinom(x = 0, size = 5, prob = 0.3)
dbinom(x = 5, size = 10, prob = 0.2)
dbinom(x = 2, size = 10, prob = 0.2)
dbinom(x = 1, size = 10, prob = 0.2)
dbinom(x = 9, size = 10, prob = 0.2)
set.seed(1) # ensure reproducibility
x <- rbinom(n = 1, size = 200, p = 0.5)
x
set.seed(1) # ensure reproducibility
x <- rbinom(n = 1000, size = 200, p = 0.5) #
mean(x)
pnorm(q = 14, mean = 40, sd = 9)
pnorm(q = 55, mean = 40, sd = 9, lower.tail = FALSE)
pnorm(q = 50, mean = 40, sd = 9) - pnorm(q = 30, mean = 40, sd = 9)
pnorm(q = 360, mean = 400, sd = 20)
dbinom(x = 0, size = 5, prob = 0.3)
pbinom(q = 1, size = 5, prob = 0.3)
1 - pbinom(q = 2, size = 5, prob = 0.3)
# prob Y >= 3 = 0.163
pbinom(q = 3, size = 5, prob= 0.3, lower.tail = FALSE)
# prob Y >= 3 = 0.163
pbinom(q = 4, size = 5, prob= 0.3, lower.tail = FALSE)
# prob Y >= 3 = 0.163
pbinom(q = 2, size = 5, prob= 0.3, lower.tail = FALSE)
pbinom(q = 2, size = 5, prob = 0.3)
pbinom(q = 2, size = 5, prob = 0.3) - pbinom(q = 0, size = 5, prob = 0.3)
mu<- 50
sigma <- 10
mu - 1.96*sigma
mu + 1.96*sigma
LCA_sim <- function(N, r, rhos, gammas){
# Inputs: N = sample size for each generated dataset
#         r = replications - number of datasets to generate
#         rhos = matrix of item response probabilities
#         gammas = vector of class membership probabilities
# Outputs: a list ret containing the values for all input parameters, an
#          array datasets containing the generated datasets, and a vector
#          seeds containing the seeds used to ensure the data generation
#          is reproducible
# generate r random seeds
set.seed(123)
r_seeds <- sample.int(1000000000, size = r, replace = FALSE)
# set number of classes and number of items
num_classes <- ncol(rhos)
num_items <- nrow(rhos)
# simulate r datasets and store in the list datasets_list
datasets_list <- list()
for(i in 1:r){
# initialise data matrix
df <- matrix(NA, nrow = N, ncol = (num_items + 1)) # extra column for class
# assign classes and populate first column of data matrix with class number
set.seed(r_seeds[i])
df[,1] <- sample(1:num_classes, N, replace = TRUE, prob = gammas)
# simulate class dependent item responses k for class j
for(j in 1:num_classes){
# create vector of indices for the cases which are in class j
ind <- which(df[,1] == j, arr.ind = TRUE)
# create an empty matrix to store the item responses for the class j cases
sim.vals <- matrix(NA, length(ind), num_items)
# loop through the k items and generate responses
for(k in 1:num_items){
# set a new seed for each item/class/replication
set.seed( round(r_seeds[i]/(j * k * 1000), 0) )
sim.vals[,k] <- sample(c(1,0), length(ind), replace = TRUE,
prob = c(rhos[k,j], 1 - rhos[k,j]))
}
# populate the rows of the data matrix that correspond to class j with
# the generated item responses
df[ind, 2:(num_items+1)] <- sim.vals
}
# save as dataframe, name columns, and convert column entries to type factor
df <- as.data.frame(df)
names(df) <- c("Class", paste0("V", 1:num_items))
df[] <- lapply(df, factor)
# save generated dataset in list
datasets_list[[i]] <- df
}
# create list of outputs
ret <- list()
ret$datasets <- datasets_list
ret$rhos <- rhos
ret$gammas <- gammas
ret$N <- N
ret$r <- r
ret$seeds <- r_seeds
return(ret)
}
################################################################################
# Run this script to export the datasets generated using the
# "1 Data generation.R" script to LatentGOLD, fit LCA models with 1-6 classes,
# and run the BLRT for these models.
# See page 29,96/97 of the LG Syntax User Guide.
################################################################################
## Specify LatentGOLD folder
LG <- 'C:/Users/eva.ryan/Documents/LatentGOLD6.0//lg60.exe'
## function to create LatentGOLD syntax to fit LCA models to generated data AND
## calculate BLRT
makeNewSyntaxBLRT = function(in_file, out_file_BLRT){
# Input: in_file = .txt file of the dataset the LCA models are to be fitted to
# Outputs: out_file_VLRT = combined LatentGOLD output file with results of
#                          the BLRT for each model fitted in the simulation
paste("//LG6.0//
version = 6.0
infile '",in_file,"'
model
options
algorithm
tolerance=1e-008 emtolerance=0.01 emiterations=250 nriterations=50;
startvalues
seed=123 sets=100 tolerance=1e-005 iterations=300;
bayes
categorical=1 variances=1 latent=1 poisson=1;
montecarlo
seed=0 sets=16 replicates=500 tolerance=1e-008
LLdiff;
missing  includeall;
output
append = '",out_file_BLRT,"' ;
variables
dependent V1 nominal 2, V2 nominal 2, V3 nominal 2, V4 nominal 2,
V5 nominal 2, V6 nominal 2 ;
latent
Cluster nominal 1:6 ;
equations
Cluster <- 1;
V1 <- 1 + Cluster;
V2 <- 1 + Cluster;
V3 <- 1 + Cluster;
V4 <- 1 + Cluster;
V5 <- 1 + Cluster;
V6 <- 1 + Cluster;
end model
",sep="")
}
## Fit the models and run BLRT
# set naming convention for output files - use sample size N (defined in "1 Data generation.R")
file_names <- paste0("sims_", N)
################################################################################
# Code to determine for what percentage of the 1000 replicate simulations the
# BLRT selects each number of classes considered (1 to 6) as the best fit,
# using the summary output files generated using the code in
# "2b Run BLRT in LatentGold.R".
################################################################################
# load tidyverse package
library(tidyverse)
## function to apply criteria and calculate how often each number of classes is
# chosen as a percentage
apply_criteria_BLRT <- function(file_names, max_class, N){
# Inputs: file_names = naming convention for the folders/files relating to the
#                      simulation of interest
#         max_class = the maximum number of classes in the models fitted to
#                     the simulated datasets
#         N = sample size for the simulations
# Outputs: results = summary table of how often the criteria for the BLRT
#                    selected each number of classes as being the best fit for
#                    the simulated data
# set working directory to where the BLRT summary is saved
setwd('C:/Users/eva.ryan/Desktop/Year 3 Semester 2/Thesis work/LCA fit indices/Final simulations/R/Final output summaries')
# read in output summary file for BLRT
df <- read_csv(paste0(file_names, "_BLRT_summary.csv"))
# add a new column to the dataset to populated with a 1 if the BLRT criteria
# selected the model corresponding to that row, or a zero otherwise
df$BLRT_select <- 0
# for loop to cycle through each simulated dataset and determine which model
# (between 1 and 6 classes) provides the best fit as per the BLRT criteria
# of the first model with a p-value > 0.05 to not reject the null hypothesis
for(i in 1:1000){
# select the row indices of just the models fitted to simulation i
ind <- which(df$Simulation_number == i, arr.ind = TRUE)
# set up while loop to cycle through models with different numbers of classes
# until criteria is satisfied (or if not satisfied, pick model with most
# classes)
# indicator if while loop should continue or not
continue <- 0
# variable to keep track of number of classes in model
c <- 1
while(continue == 0){
# check if BLRT p-value is > 0.05
if( df$BLRT_p_value[ind[c]] > 0.05){
# select the c-1 class model as the best
df$BLRT_select[ind[c-1]] <- 1
# change continue to 1 to stop the while loop
continue <- 1
}else{
# otherwise, if c is not the maximum number of classes, increase c by 1
# and loop again
if(c < max_class){
c <- c + 1
}else{
# if c is equal to the maximum number of classes and the criteria
# still hasn't been met, #select c as the best number of classes and
# stop the while loop
#df$BLRT_select[ind[c]] <- 1
continue <- 1
}
}
}
}
## calculate percentage of times each number of classes is chosen by the BLRT
# create dataframe to store results
results <- as.data.frame(matrix(NA, nrow = 1, ncol = max_class))
names(results) <- 1:6
row.names(results) <- c("BLRT")
# loop through classes calculating percentages
for(c in 1:max_class){
# filter to just rows corresponding to models with c classes
df_c <- df %>%
filter(Number_of_classes == c)
# populate results dataframe with percentage of simulations the BLRT
# selected c classes for
results[1, c] <- paste0(round((sum(df_c$BLRT_select)/1000)*100, 1), "%")
}
# return dataframe of results
return(results)
}
## create summaries for each sample size N
summary_500 <- apply_criteria_BLRT(file_names = paste0("sims_", 500),
max_class = 6, N = 500)
summary_5000 <- apply_criteria_BLRT(file_names = paste0("sims_", 5000),
max_class = 6, N = 5000)
summary_10000 <- apply_criteria_BLRT(file_names = paste0("sims_", 10000),
max_class = 6, N = 10000)
summary_30000 <- apply_criteria_BLRT(file_names = paste0("sims_", 30000),
max_class = 6, N = 30000)
summary_100000 <- apply_criteria_BLRT(file_names = paste0("sims_", 100000),
max_class = 6, N = 100000)
# display the summaries
summary_500
summary_5000
summary_10000
summary_30000
summary_100000
################################################################################
# Code to determine for what percentage of the 1000 replicate simulations the
# BLRT selects each number of classes considered (1 to 6) as the best fit,
# using the summary output files generated using the code in
# "2b Run BLRT in LatentGold.R".
################################################################################
# load tidyverse package
library(tidyverse)
## function to apply criteria and calculate how often each number of classes is
# chosen as a percentage
apply_criteria_BLRT <- function(file_names, max_class, N){
# Inputs: file_names = naming convention for the folders/files relating to the
#                      simulation of interest
#         max_class = the maximum number of classes in the models fitted to
#                     the simulated datasets
#         N = sample size for the simulations
# Outputs: results = summary table of how often the criteria for the BLRT
#                    selected each number of classes as being the best fit for
#                    the simulated data
# set working directory to where the BLRT summary is saved
setwd('C:/Users/eva.ryan/Desktop/Year 3 Semester 2/Thesis work/LCA fit indices/Final simulations/R/Final output summaries')
# read in output summary file for BLRT
df <- read_csv(paste0(file_names, "_BLRT_summary.csv"))
# add a new column to the dataset to populated with a 1 if the BLRT criteria
# selected the model corresponding to that row, or a zero otherwise
df$BLRT_select <- 0
# for loop to cycle through each simulated dataset and determine which model
# (between 1 and 6 classes) provides the best fit as per the BLRT criteria
# of the first model with a p-value > 0.05 to not reject the null hypothesis
for(i in 1:1000){
# select the row indices of just the models fitted to simulation i
ind <- which(df$Simulation_number == i, arr.ind = TRUE)
# set up while loop to cycle through models with different numbers of classes
# until criteria is satisfied (or if not satisfied, pick model with most
# classes)
# indicator if while loop should continue or not
continue <- 0
# variable to keep track of number of classes in model
c <- 1
while(continue == 0){
# check if BLRT p-value is > 0.05
if( df$BLRT_p_value[ind[c]] > 0.05){
# select the c-1 class model as the best
df$BLRT_select[ind[c-1]] <- 1
# change continue to 1 to stop the while loop
continue <- 1
}else{
# otherwise, if c is not the maximum number of classes, increase c by 1
# and loop again
if(c < max_class){
c <- c + 1
}else{
# if c is equal to the maximum number of classes and the criteria
# still hasn't been met, select c as the best number of classes and
# stop the while loop
df$BLRT_select[ind[c]] <- 1
continue <- 1
}
}
}
}
## calculate percentage of times each number of classes is chosen by the BLRT
# create dataframe to store results
results <- as.data.frame(matrix(NA, nrow = 1, ncol = max_class))
names(results) <- 1:6
row.names(results) <- c("BLRT")
# loop through classes calculating percentages
for(c in 1:max_class){
# filter to just rows corresponding to models with c classes
df_c <- df %>%
filter(Number_of_classes == c)
# populate results dataframe with percentage of simulations the BLRT
# selected c classes for
results[1, c] <- paste0(round((sum(df_c$BLRT_select)/1000)*100, 1), "%")
}
# return dataframe of results
return(results)
}
## create summaries for each sample size N
summary_500 <- apply_criteria_BLRT(file_names = paste0("sims_", 500),
max_class = 6, N = 500)
summary_5000 <- apply_criteria_BLRT(file_names = paste0("sims_", 5000),
max_class = 6, N = 5000)
summary_10000 <- apply_criteria_BLRT(file_names = paste0("sims_", 10000),
max_class = 6, N = 10000)
summary_30000 <- apply_criteria_BLRT(file_names = paste0("sims_", 30000),
max_class = 6, N = 30000)
summary_100000 <- apply_criteria_BLRT(file_names = paste0("sims_", 100000),
max_class = 6, N = 100000)
# display the summaries
summary_500
summary_5000
summary_10000
summary_30000
summary_100000
